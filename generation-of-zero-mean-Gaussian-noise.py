import numpy as np
import math
import cv2
import matplotlib.pyplot as plt

img = cv2.imread("gray_100_image.jpg")
img_g = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img_shape = img_g.shape
img_row = img_shape[0]
img_col = img_shape[1]

# given parameters
miu = 0
sigma_pow2 = 15
sigma = math.sqrt(sigma_pow2)
# generate Gaussian noise
img_f = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
for i in range(img_row-1):
    for j in range(img_col):
        # Randomize r, phi
        r = np.random.random()
        phi = np.random.random()

        # Calculate z_1 and z_2 by formula
        z_1 = sigma * math.cos(2 * math.pi * phi) * math.sqrt(-2 * math.log(r))
        z_2 = sigma * math.sin(2 * math.pi * phi) * math.sqrt(-2 * math.log(r))

        # Set f(x,y) = g(x,y) + z_1 and f(x, y+1) = g(x, y+1) + z_2, where g is the input image.
        img_f[i][j] = img_g[i][j] + z_1
        img_f[i+1][j] = img_g[i+1][j] + z_2

        # set range of f(x, y) and f(x, y+1)
        if(img_f[i][j] < 0):
            img_f[i][j] = 0
        elif(img_f[i][j] > 255):
            img_f[i][j] = 255
        if(img_f[i+1][j] < 0):
            img_f[i+1][j] = 0
        elif(img_f[i+1][j] > 255):
            img_f[i+1][j] = 255

cv2.imwrite('Image-generated-by-Gaussian-noise.jpg', img_f)
plt.xlim([0, 256])
plt.hist(img_f.ravel(), 256, [0, 256])
plt.title('Histogram of image generated by Gaussian noise')
plt.show()

cv2.imshow("Original-image", img_g)
cv2.imshow("Image-generated-by-Gaussian-noise", img_f)
cv2.waitKey(0)
cv2.destroyAllWindows()
